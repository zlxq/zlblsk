<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:util="http://www.springframework.org/schema/util" xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xmlns:cache="http://www.springframework.org/schema/cache"
	xsi:schemaLocation="
 http://www.springframework.org/schema/context
http://www.springframework.org/schema/context/spring-context.xsd
 http://www.springframework.org/schema/beans
 http://www.springframework.org/schema/beans/spring-beans.xsd
 http://www.springframework.org/schema/tx
 http://www.springframework.org/schema/tx/spring-tx.xsd
 http://www.springframework.org/schema/jdbc
 http://www.springframework.org/schema/jdbc/spring-jdbc-3.1.xsd
http://www.springframework.org/schema/cache
 http://www.springframework.org/schema/cache/spring-cache-3.1.xsd
 http://www.springframework.org/schema/aop
http://www.springframework.org/schema/aop/spring-aop.xsd
http://www.springframework.org/schema/util
http://www.springframework.org/schema/util/spring-util.xsd">

	<!-- 引入jdbc配置文件 -->
	<bean id="propertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath:jdbc.properties</value>
			</list>
		</property>
	</bean>

	<bean id="dataSource" class="org.apache.commons.dbcp2.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName" value="${jdbc.driver}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<!--initialSize: 初始化连接 -->
		<property name="initialSize" value="${jdbc.initialSize}" />
		<!--maxTotal: 最大连接数量 -->
		<property name="maxTotal" value="${jdbc.maxTotal}" />
		<!--minIdle: 最小空闲连接 -->
		<property name="minIdle" value="${jdbc.minIdle}" />
		<!--maxIdle: 最大空闲连接 -->
		<property name="maxIdle" value="${jdbc.maxIdle}" />
		<!-- 连接被泄露时是否打印 -->
		<property name="logAbandoned" value="${jdbc.logAbandoned}" />
	</bean>

	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate5.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<!-- <property name="mappingLocations">
			<value>classpath:/com/**/pojo/*.hbm.xml</value>
		</property> -->
		
		<property name="mappingJarLocations">
			<list>
				<value>WEB-INF/lib/zlxq-pojo-0.0.1.jar</value>
			</list>
		</property>
		
		<!-- spring管理hibernate事物（回滚、一级缓存、二级缓存等） -->
		<property name="hibernateProperties">
			<value>
				hibernate.dialect=org.hibernate.dialect.MySQLDialect
				hibernate.hbm2ddl.auto=update
				hibernate.show_sql=true
				hibernate.format_sql=true
				hibernate.connection.autocommit=true
				hibernate.connection.characterEncoding=UTF-8
			</value>
		</property>
	</bean>

	<!-- 配置事务容器 1利用tx标签配置事物 -->

	<bean id="transactionManager"
		class="org.springframework.orm.hibernate5.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>
	<!-- 定义事务规则 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
		<!-- 
			1、REQUIRED: 业务方法需要在一个事务中运行。如果方法运行时，已经在一个事务中，那么加到该事务，否则为自己创建一个新的事务。Spring默认的事务传播属性设置@Transactional(propagation=Propagation.REQUIRED)
			2、NOT_SUPPORTED：声明方法不需要事务。如果方法没有关联到一个事务，容器不会为它开启事务。如果方法在一个事务中被调用，该事务会被挂起，在方法调用结束后，原先的事务便会恢复执行。
			3、REQUERESNEW：属性表明不管是否存在事务，业务方法总会为自己发起一个新的事务。如果方法已经运行在一个事务中，则原有的事务会被挂起，新的事务会被创建，直到方法执行结束，新事务才算结束，原先的事务才会恢复执行。
			4、MANDATORY:该属性指定业务方法只能在一个已经存在的事务中执行，业务方法不能发起自己的事务。如果业务方法在没有事务的环境下调用，容器就会抛出异常。
			5、SUPPORTS:这一事务属性表明，如果业务方法在某个事务范围内被调用，则方法成为该事务的一部分。如果业务方法在事务范围外被调用，则方法在没有事务的环境下执行
			6、NEVER:：指定业务方法绝对不能在事务范围内执行。如果业务方法在某个事务范围内执行，则容器抛出异常，只有业务方法没有关联到任何事务，才能正常执行。
			7、NESTED:如果一个事务存在，则运行在一个嵌套的事务中，如果没有活动事务，则按REQUIRED属性执行，它使用了一个单独的事务，这个事务拥有多个可以回滚的保存点。内部事务的回滚不会对外部事务造成影响。它只对DataSourceTransactionalmaManager事务管理器起效。
			8、read-only="true" 只读事务，就是不用控制，可以提高效率。
			
			
			比如：一个get方法是不需要事务的，加上事务会影响效率的，这时我们可以加上这个属性设置：@Transactional(propagation=Propagation.NOT_SUPPORTED)。这时此方法就不会有事务控制了。
			像save、update等业务方法默认都是要事务控制的@Transactional(propagation=Propagation.REQUEIRED),这个是默认的，可以省写
			
		-->
			<tx:method name="get*" propagation="NOT_SUPPORTED" />
			<tx:method name="add*" propagation="REQUIRED" />
			<tx:method name="save*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="remove*" propagation="REQUIRED" />
			<tx:method name="delete*" propagation="REQUIRED" />
			<tx:method name="del*" propagation="REQUIRED" />
		</tx:attributes>
	</tx:advice>
	<!-- 定义事务入口 -->
	<aop:config>
		<aop:pointcut id="allDaoMethod" expression="execution(* com.framework.web.ssh.dao.*.*(..))" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="allDaoMethod" />
	</aop:config>
</beans>